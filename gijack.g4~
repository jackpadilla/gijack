grammar gijack;

options {
    lenguage=Python;
}

start: programa EOF;

programa: 'program' ID ';' (variable|funciones)? '(' Procesos ')'; 

procesos: proceso+;

proceso: (asignacion | condicion | ciclo | imprimir | lectura | FUN_CALL )? ;

LISTA: '{' elemento '}' ;

asignacion: ID ( '('  lista  ')' )? '=' expresion ';' ;

for: 'for'(asignacion|variable) ';' expresion ';' expresion ';' procesos;

while: 'while' expresion '{' procesos '}' ;

do: 'do' '{' proceso '}' 'while' expresion ';'

ciclos: (while | do | for) ;

condicion: 'if' expresion '{' procesos '}' else? elseif? ;

else: 'else' '{' procesos '}'; 

elseif: 'else if' expresion '{' procesos '}' ;

variable: tipo ID (('=' expresion)|('[' lista ']'))?  ';' ;

imprimir: 'print' '(' expresion ( ',' expresion)* ')' ';' ;

tipo: (boolean | char | string | int | float | double) ;

argumentos: ( tipo ID ( ',' tipo ID)*)? ;

funcion: 'funcion' tipo? ID '(' argumentos ')' '{' variable? proceso '}' ;

CTE:  (INT | FLOAT | CHAR | FLOAT | STRING | list);

COMP_OP: ( '>' | '<' | '>=' | '<=' | '==' | '!='); 

REL_OP: ('and' | 'or' | '&&' | '||');

MULT_OP: ('*' | '%' | '/' );

ADD_OP: ( '+' | '-');

NEG_OP: ('not' | '!');

EXPRESION: EXP (REL_OP EXP)? ;

EXP: E ( COMP_OP| E)? ;

E: TERM (ADD TERM)*;

FACT: NEG_OP? ( ( '(' EXPRESION ')') | CTE | (ID ('[' LISTA ']'))) ; 

lectura: 'read' '(' ID ('[' LISTA ']')?  (',' ID ('[' LISTA ']')?)* ')' ';' ;

FUNC_CALL: ID '(' CALL_ARG ')' ';' ;

CALL_ARG: (EXPRESION (',' EXPRESION )*)?


ID  :   ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'0'..'9'|'_')*
    ;

INT :   '0'..'9'+
    ;

FLOAT
    :   ('0'..'9')+ '.' ('0'..'9')* EXPONENT?
    |   '.' ('0'..'9')+ EXPONENT?
    |   ('0'..'9')+ EXPONENT
    ;

WS  :   ( ' '
        | '\t'
        | '\r'
        | '\n'
        ) {$channel=HIDDEN;}
    ;

STRING
    :  '"' ( ESC_SEQ | ~('\\'|'"') )* '"' ;

fragment
EXPONENT : ('e'|'E') ('+'|'-')? ('0'..'9')+ ;

fragment
HEX_DIGIT : ('0'..'9'|'a'..'f'|'A'..'F') ;

fragment
ESC_SEQ
    :   '\\' ('b'|'t'|'n'|'f'|'r'|'\"'|'\''|'\\')
    |   UNICODE_ESC
    |   OCTAL_ESC
    ;

fragment
OCTAL_ESC
    :   '\\' ('0'..'3') ('0'..'7') ('0'..'7')
    |   '\\' ('0'..'7') ('0'..'7')
    |   '\\' ('0'..'7')
    ;

fragment
UNICODE_ESC
    :   '\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
    ;

expresion: cond ( ('&&' |'and' | 'or' | '||' ) cond)? ;

comp: ('>' | '<' | '>=' | '<=' | '==' | '!=');

cond: sum ( ('<' | '>' | '!=' | '==' ) sum)? ;

sum: (term | '-' | '+') ;

term: (fact | '*' | '/') ;

fact: ('id' | cte | ('{' | sum| '}'))

elemento: (cte (',' cte)* )?
